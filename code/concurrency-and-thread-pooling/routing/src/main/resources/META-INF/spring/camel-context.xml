<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:osgi="http://www.springframework.org/schema/osgi"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/osgi
       http://www.springframework.org/schema/osgi/spring-osgi.xsd
       http://camel.apache.org/schema/cxf
       http://camel.apache.org/schema/cxf/camel-cxf-spring.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- H2 DB -->
    <bean id="usecaseDB" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:tcp://localhost/~/usecaseDB"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <!-- SQL Component & Datasource -->
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
    </bean>

    <cxf:cxfEndpoint id="customerWebService" address="http://localhost:9090/ws/customerService"
                     serviceClass="org.fuse.usecase.service.CustomerWS"
                     loggingFeatureEnabled="true">
    </cxf:cxfEndpoint>

    <cxf:rsServer id="customerRestService" address="http://localhost:9191/rest"
                  serviceClass="org.fuse.usecase.service.CustomerRest"
                  loggingFeatureEnabled="true">
        <cxf:providers>
            <ref bean="jsonProvider"/>
        </cxf:providers>
    </cxf:rsServer>

    <cxf:rsClient id="customerRestServiceClient" address="http://localhost:9191/rest"
                  loggingFeatureEnabled="false" serviceClass="org.fuse.usecase.service.CustomerRest">
        <cxf:providers>
            <ref bean="jsonProvider"/>
        </cxf:providers>
    </cxf:rsClient>

    <bean id="reconcileData" class="org.fuse.usecase.AccountAggregator"/>
    <bean id="customerWSImplBean" class="org.fuse.usecase.service.CustomerWSImpl"/>
    <bean id="customerRestImplBean" class="org.fuse.usecase.service.CustomerRestImpl"/>
    <bean id="processorBean" class="org.fuse.usecase.ProcessorBean"/>

    <!--  THIS PROVIDER DOESN'T WORK & RETURN ERROR 415 Unsupported Media Type
      It can't also handle the Body : No message body reader has been found for
      class CXF_Test.cxf_test.Book, ContentType: application/json
      <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider"/>
    -->
    <bean id="jsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider"/>
    

    <camelContext trace="false" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="properties" location="fabric8/route.properties"/>
        
        <dataFormats>
	    	<!-- here we define a Json data format with the id jack and that it should use the TestPojo as the class type when
	         doing unmarshal. The unmarshalTypeName is optional, if not provided Camel will use a Map as the type -->
	    	<json id="accountJson" library="Jackson" unmarshalTypeName="org.globex.Account"/>
	    	<json id="json" library="Jackson"/>
	    	<bindy type="Csv" classType="org.acme.Customer" id="csv"/>
		</dataFormats>
		
		<route id="read csv and split into json files">
	        <from uri="file:src/data/csv?fileName=many-customers.csv&amp;noop=false" />
	         <log message="picked up file  ${body} "/>
	        <split id="splitter" streaming="true"
            parallelProcessing="true" timeout="0">
	            <tokenize token="\n"/>
				<to uri="dozer:csv2json?mappingFile=transformation.xml&amp;sourceModel=org.acme.Customer&amp;targetModel=org.globex.Account&amp;marshalId=json&amp;unmarshalId=csv"/>
	            <log message="sending to outfile ${body}"/>
	            <to uri="file:src/data/json?fileName=csv-record-${property.CamelSplitIndex}.json" />
        	</split>
		</route>
        
        <route>
        	<from uri="file:src/data/json"/>
        	<unmarshal ref="accountJson"/>
        	<multicast strategyRef="reconcileData">
<!--         		<log loggingLevel="INFO" message=">>>>>>>>>>>>>>>>>>>>>>>>>> MULTICASTING"/> -->
        		<to uri="direct:callRestEndpoint"/>
<!--         		<log loggingLevel ="INFO" message=">>>>> MULTICAST WS CALL"/> -->
        		<to	uri="direct:callWSEndpoint"/>
        	</multicast>
<!--         	CLIENT_ID, SALES_CONTACT, COMPANY_NAME, COMPANY_GEO, COMPANY_ACTIVE, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, CONTACT_ADDRESS, CONTACT_CITY, CONTACT_STATE, CONTACT_ZIP, CONTACT_PHONE, CREATION_DATE, CREATION_USER  -->
<!--         		<log loggingLevel ="INFO" message=">>>>> Aggregated Body: ${body}"/> -->
<!-- <to uri="sql:INSERT INTO USECASE.T_ACCOUNT(CLIENT_ID, SALES_CONTACT, COMPANY_NAME, COMPANY_GEO, COMPANY_ACTIVE, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, CONTACT_ADDRESS, CONTACT_CITY, CONTACT_STATE, CONTACT_ZIP, CONTACT_PHONE) VALUES (:#${body.clientId}, :#${body.salesRepresentative}, :#${body.company.name}, :#${body.company.geo}, :#${body.company.active}, :#${body.contact.firstName}, :#${body.contact.lastName}, :#${body.contact.streetAddr}, :#${body.contact.city}, :#${body.contact.state}, :#${body.contact.zip}, :#${body.contact.phone})?dataSource=usecaseDB"/> -->

        	<log loggingLevel="INFO"

                 message=">> Aggregated result: Account : ${body.clientId}, ${body.salesRepresentative}; Company : ${body.company.name}, ${body.company.geo}, ${body.company.active}; Contact

: ${body.contact.firstName}, ${body.contact.lastName}, ${body.contact.streetAddr}, ${body.contact.city}, ${body.contact.state}, ${body.contact.zip}, ${body.contact.phone}"/> 
        </route>
        
        <route>
			<from uri="direct:callRestEndpoint"/>
			<log loggingLevel="INFO" message=">>>>>>>>>>>>>>>>>>>>>>>>>> DIRECT CALL TO REST ENDPOINT"/>
<!-- 			Content-Type=application-json -->
<!-- 			Accept=application-json -->
<!-- 			CamelHTTPMethod=POST -->
<!-- 			CamelHttpPath=/customerservice/enrich -->
<!-- 			CamelCxfRsUsingHttpAPI=True -->
				
				<setHeader headerName="Content-Type">
					<constant>application/json</constant>
				</setHeader>
				<setHeader headerName="Accept">
					<constant>application/json</constant>
				</setHeader>
				<setHeader headerName="CamelHTTPMethod">
					<constant>POST</constant>
				</setHeader>
				<setHeader headerName="CamelHttpPath">
					<constant>/customerservice/enrich</constant>
				</setHeader>
				<setHeader headerName="CamelCxfRsUsingHttpAPI">
					<constant>True</constant>
				</setHeader>
			
			<inOut uri="cxfrs:bean:customerRestServiceClient"/>   
			<bean beanType="org.fuse.usecase.ProcessorBean" method="convertEntityToString"/>

            <unmarshal>

                <json library="Jackson" unmarshalTypeName="org.globex.Account"/>

            </unmarshal>  
            <log loggingLevel="INFO" message=">>>>>>>>>>>>>>>>>>>>>>>>>> END DIRECT CALL TO REST ENDPOINT"/>
			   
        </route>
        
        <route>
        	<from uri="cxfrs:bean:customerRestService"/>
        	<bean ref="customerRestImplBean" method="enrich"/>
        </route>
        
        <route>
        	<from uri="direct:callWSEndpoint"/>
        	<log loggingLevel="INFO" message=">>>>>>>>>>>>>>>>>>>>>>>>>> DIRECT CALL TO WS ENDPOINT"/>
        	<inOut uri="cxf:bean:customerWebService"/>   
        </route>
        
        <route>
        	<from uri="cxf:bean:customerWebService"/>
        	<bean ref="customerWSImplBean" method="updateAccount"/>
        </route>
        
    </camelContext>
</beans>
